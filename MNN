import numpy
import scipy.special

# 神经网络类定义
class NeuralNetwork():
    # 初始化神经网络
    def __init__(self, inputnodes, hiddennodes, outputnodes, learningrate):
        # 设置输入层节点，隐藏层节点和输出层节点的数量
        self.inodes = inputnodes
        self.hnodes = hiddennodes
        self.onodes = outputnodes
        # 学习率设置
        self.lr = learningrate
        # 权重矩阵设置 正态分布
        self.wih = numpy.random.normal(0.0, pow(self.hnodes, -0.5), (self.hnodes, self.inodes))
        self.who = numpy.random.normal(0.0, pow(self.onodes, -0.5), (self.onodes, self.hnodes))
        # 激活函数设置，sigmod()函数
        self.activation_function = lambda x: scipy.special.expit(x)
        pass

    # 训练神经网络
    def train(self,input_list,target_list):
        # 转换输入输出列表到二维数组
        inputs = numpy.array(input_list, ndmin=2).T
        targets = numpy.array(target_list,ndmin= 2).T
        # 计算到隐藏层的信号
        hidden_inputs = numpy.dot(self.wih, inputs)
        # 计算隐藏层输出的信号
        hidden_outputs = self.activation_function(hidden_inputs)
        # 计算到输出层的信号
        final_inputs = numpy.dot(self.who, hidden_outputs)
        final_outputs = self.activation_function(final_inputs)

        output_errors = targets - final_outputs
        hidden_errors = numpy.dot(self.who.T,output_errors)

        #隐藏层和输出层权重更新
        self.who += self.lr * numpy.dot((output_errors*final_outputs*
                                         (1.0-final_outputs)),
                                        numpy.transpose(hidden_outputs))
        #输入层和隐藏层权重更新
        self.wih += self.lr * numpy.dot((hidden_errors * hidden_outputs *
                                         (1.0 - hidden_outputs)),
                                        numpy.transpose(inputs))
        pass
    
    # 查询神经网络
    def query(self, input_list):
        # 转换输入列表到二维数组
        inputs = numpy.array(input_list, ndmin=2).T
        # 计算到隐藏层的信号
        hidden_inputs = numpy.dot(self.wih, inputs)
        # 计算隐藏层输出的信号
        hidden_outputs = self.activation_function(hidden_inputs)
        # 计算到输出层的信号
        final_inputs = numpy.dot(self.who, hidden_outputs)
        final_outputs = self.activation_function(final_inputs)

        return final_outputs

#设置每层节点个数
input_nodes = 784
hidden_nodes = 100
output_nodes = 10

#设置学习率为0.3
learning_rate =0.3

#创建神经网络
n = NeuralNetwork(input_nodes,hidden_nodes,output_nodes,learning_rate)
training_data_file=open('mnist_test.csv','r')
training_data_list=training_data_file.readlines()
training_data_file.close()

for record in training_data_list:
    all_values=record.split(',')
    inputs=(numpy.asfarray(all_values[1:])/255.0*0.99)+0.01
    targets=numpy.zeros(output_nodes)+0.01
    targets[int(all_values[0])]=0.99
    n.train(inputs, targets)
    pass
            
scorecard=[]
test_data_file=open("mnist_train_100.csv","r")
test_data_list=test_data_file.readlines()
test_data_file.close()#

##for record in test_data_list:
##    all_values=record.split(',')
##    correct_label=int(all_values[0])
##    inputs=(numpy.asfarray(all_values[1:])/255.0*0.99)+0.01
##    outputs=n.query(inputs)
##    label=numpy.argmax(outputs)
##    if (label==correct_label):
##        scorecard.append(1)
##    else:
##        scorecard.append(0)
##    print(scorecard)
##    pass

totalnum=0
correctnum=0

for record in test_data_list:
       totalnum=totalnum+1
       all_values=record.split(',')
       correct_label=int(all_values[0])
       inputs=(numpy.asfarray(all_values[1:])/255.0*0.99)+0.01
       outputs=n.query(inputs)
       label=numpy.argmax(outputs)
       if label==correct_label:
              correctnum = correctnum+1
print("正确率：",correctnum/totalnum)
